#+TITLE: config
#+PROPERTY: header-args :results silent
* Setups

#+BEGIN_SRC sh :tangle no
brew install wordnet
brew install languagetool
brew install aspell
brew install terminal-notifier
#+END_SRC
* User Config
** Global settings

Enable emacs mode depending on the file format
#+BEGIN_SRC emacs-lisp
;; * Config
(setq blink-cursor-mode t)
(setq +file-templates-dir "~/.doom.d/templates"
      max-specpdl-size 10000)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.avsc\\'" . json-mode))
  (add-to-list 'auto-mode-alist '("\\.lock\\'" . toml-mode))
  (add-to-list 'auto-mode-alist '("\\.csv\\'" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.zsh\\'" . sh-mode))
#+END_SRC
doom theme and mode settings
#+BEGIN_SRC emacs-lisp
(after! doom-modeline
  (setq doom-modeline-major-mode-icon t)
  (setq doom-modeline-buffer-encoding nil)
  (setq doom-modeline-persp-name t)
  (setq vc-handled-backends nil)
  (setq inhibit-compacting-font-caches t)
  (setq doom-modeline-mu4e t))
(setq doom-theme 'doom-one-light)
(add-hook! :append 'doom-load-theme-hook (load! "+themes"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq exec-path-from-shell-check-startup-files nil)
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
(def-package! dired
  :commands dired-jump
  :init
  (setq ;; Always copy/delete recursively
   dired-recursive-copies 'always
   dired-recursive-deletes 'top
   ;; Auto refresh dired, but be quiet about it
   global-auto-revert-non-file-buffers t
   auto-revert-verbose nil
   dired-dwim-target t
   dired-listing-switches "-alh"
   ;; files
   image-dired-dir (concat doom-cache-dir "image-dired/")
   image-dired-db-file (concat image-dired-dir "db.el")
   image-dired-gallery-dir (concat image-dired-dir "gallery/")
   image-dired-temp-image-file (concat image-dired-dir "temp-image")
   image-dired-temp-rotate-image-file (concat image-dired-dir "temp-rotate-image"))
  :config

  ;; Automatically create missing directories when creating new files
  (defun +dired|create-non-existent-directory ()
    (let ((parent-directory (file-name-directory buffer-file-name)))
      (when (and (not (file-exists-p parent-directory))
                 (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
        (make-directory parent-directory t))))
  (push #'+dired|create-non-existent-directory find-file-not-found-functions)

  ;; Kill buffer when quitting dired buffers
  (define-key dired-mode-map [remap quit-window] (Î»! (quit-window t)))

  (after! evil-snipe
    (push 'dired-mode evil-snipe-disabled-modes))
  (set-evil-initial-state! 'dired-mode 'normal))

(def-package! ivy-dired-history
  :after dired
  :config
  (after! savehist
    (add-to-list 'savehist-additional-variables 'ivy-dired-history-variable)))


(def-package! dired-filter
  :after dired)

(def-package! dired-subtree
  :after dired)

(def-package! dired-narrow
  :after dired
  :config)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(map!
 (:after dired-filter
   :map dired-mode-map
   :n "F" dired-filter-mark-map
   :n "f" dired-filter-map)
 (:after dired-subtree
   :map dired-mode-map
   :n "H" #'dired-subtree-remove
   :n "L" #'dired-subtree-insert
   :n "i" #'dired-subtree-insert
   :localleader
   :n "ii" #'dired-subtree-insert
   :n "ir" #'dired-subtree-remove
   :n "ij" #'dired-subtree-down
   :n "ik" #'dired-subtree-up
   :n "in" #'dired-subtree-next-sibling
   :n "ip" #'dired-subtree-previous-sibling
   :n "if" #'dired-subtree-apply-filter
   :n "ia" #'dired-subtree-narrow
   :n "i_" #'dired-subtree-beginning
   :n "i$" #'dired-subtree-end
   :n "im" #'dired-subtree-mark-subtree
   :n "im" #'dired-subtree-unmark-subtree
   :n "if" #'dired-subtree-only-this-file
   :n "id" #'dired-subtree-only-this-directory)
 (:after dired-narrow
   :map dired-mode-map
   :n "?" #'dired-narrow-regexp
   :n "/" #'dired-narrow-fuzzy))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(after! (hydra dired-narrow)
 (defhydra hydra-dired ()
   "extendable"

   ("\\" dired-do-ispell "ispell" :column "utils")
   ("=" diredp-ediff "ediff")         ;; smart diff
   ("C" dired-do-copy "copy")        ;; Copy all marked files
   ("e" dired-ediff-files "files")
   ("r" dired-do-rsynch "rsync")
   ("Y" dired-do-relsymlink "symlink")
   ("z" diredp-compress-this-file "compress")
   ("Z" dired-do-compress "compress some file")

   ("(" dired-hide-details-mode "hide deets" :column "view")
   ("v" dired-view-file "view file")      ;; q to exit, s to search, = gets line #
   ("?" dired-summary "summary")
   ("$" diredp-hide-subdir-nomove "hide subdir")
   ("o" dired-find-file-other-window "file other window")
   ("l" dired-do-redisplay "redisplay")   ;; relist the marked or singel directory
   ("O" dired-display-file "show file")
   (")" dired-omit-mode "omit" :column "modify")
   ("G" dired-do-chgrp "change group")
   ("+" dired-create-directory "mkdir")
   ("i" dired-maybe-insert-subdir "maybye insert")
   ("w" dired-kill-subdir "kill dir")
   ("D" dired-do-delete "do del")
   ("R" dired-do-rename "rename")
   ("S" dired-do-symlink "symlink")
   ("t" dired-toggle-marks "toggle marks")
   ("U" dired-unmark-all-marks "unmark all")
   ("u" dired-unmark "unmark")
   ("E" dired-mark-extension "mark ext")
   ("g" revert-buffer "revert")        ;; read all directories again (refresh)
   ("M" dired-do-chmod "chmod")

   ("A" dired-do-find-regexp "find regexp" :column "search")
   ("m" dired-mark "mark")
   ("F" dired-do-find-marked-files "marked files")
   ("Q" dired-do-find-regexp-and-replace "regexp and replace")
   ("/" dired-narrow-fuzzy "narrow" )
   ("q" nil)
   ("." nil :color blue))
 (map! :map dired-mode-map :n "." #'hydra-dired/body))
#+END_SRC
** Popup
#+BEGIN_SRC emacs-lisp

(map! :desc "Toggle last popup" :n "`" #'+popup/toggle)
(set-popup-rule! "^\\*Customize.*" :slot 2 :side 'right :modeline nil :select t :quit t)
(set-popup-rule! " \\*undo-tree\\*" :slot 2 :side 'left :size 20 :modeline nil :select t :quit t)
(set-popup-rule! "^\\*Password-Store" :side 'left :size 0.25)


;; * help
(set-popup-rule! "^\\*info.*" :size 82 :side 'right :ttl t :select t :quit t)
(set-popup-rule! "^\\*Man.*" :size 82 :side 'right :ttl t :select t :quit t)
(set-popup-rule! "^\\*tldr\\*" :size 82 :side 'right :select t :quit t)
(set-popup-rule! "^\\*helpful.*" :size 82 :side 'right :select t :quit t)
(set-popup-rule! "^\\*Help.*" :size 82 :height 0.6 :side 'right :select t :quit t)
(set-popup-rule! "^ \\*Metahelp.*" :size 82 :side 'right :select t :quit t)
(set-popup-rule! "^\\*Apropos.*" :size 82 :height 0.6 :side 'right :select t :quit t)
(set-popup-rule! "^\\*Messages\\*" :vslot -10 :height 10 :side 'bottom :select t :quit t :ttl nil)


;; (set-popup-rule! "^ ?\\*NeoTree" :side ,neo-window-position :width ,neo-window-width :quit 'current :select t)
(set-popup-rule! "\\*VC-history\\*" :slot 2 :side 'right :size 82 :modeline nil :select t :quit t)

(set-popup-rule! "\\*xwidget" :side 'right :size 100 :select t)

;; * lang
(after! org
  (set-popup-rule! "^\\*Org Src" :side 'bottom :slot -2 :height 0.6 :width 0.5 :select t :autosave t :ttl nil :quit nil :select t))


#+END_SRC
** Git
Set =giteditor= as emacs using =witheditor=
#+BEGIN_SRC emacs-lisp
  (define-key (current-global-map)
    [remap async-shell-command] 'with-editor-async-shell-command)
  (define-key (current-global-map)
    [remap shell-command] 'with-editor-shell-command)
  (add-hook 'eshell-mode-hook 'with-editor-export-editor)
  (add-hook 'term-exec-hook   'with-editor-export-editor)
#+END_SRC

Show branch name before tags
#+BEGIN_SRC emacs-lisp
 (setq magit-log-show-refname-after-summary t)
#+END_SRC

Keybindings
#+BEGIN_SRC emacs-lisp
(map! :map with-editor-mode-map
      :after magit
      :localleader
      "," #'with-editor-finish
      "c" #'with-editor-finish
      "k" #'with-editor-cancel)
(after! magit-todos
  (setq magit-todos-update nil))
#+END_SRC

#+begin_src emacs-lisp
;; refactor this
(defun ediff-copy-both-to-C ()
  (interactive)
  (ediff-copy-diff ediff-current-difference nil 'C nil
                   (concat
                    (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                    (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))
(defun add-d-to-ediff-mode-map () (define-key ediff-mode-map "B" 'ediff-copy-both-to-C))
(add-hook 'ediff-keymap-setup-hook 'add-d-to-ediff-mode-map)
#+end_src

#+BEGIN_SRC emacs-lisp
(setq kill-do-not-save-duplicates t)
#+END_SRC
** Global Keybindings
#+BEGIN_SRC emacs-lisp
(map! :leader
      :nmg "SPC" #'save-buffer)
(setq doom-localleader-key ",")
(map! :after evil
      :vin "C-y" #'counsel-yank-pop)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(map!
 :v "s" #'evil-surround-region

 (:when (featurep! :editor fold)
   :nv "zz" #'+fold/toggle))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix-map ("f" . "file")
        :desc "Delete this file"            "D"   #'doom/delete-this-file)

      (:prefix-map ("g" . "git")
        (:when (featurep! :tools magit)
          :desc "Magit dispatch"            "m"   #'magit-dispatch
          :desc "Forge dispatch"            "'"   #'forge-dispatch
         :desc "Magit status"              "s"   #'magit-status
          :desc "Magit blame"               "b"   #'magit-blame-addition))
      )
#+END_SRC

Ivy resume
#+BEGIN_SRC emacs-lisp
 (map! :leader
      "r" #'ivy-resume
      )
#+END_SRC

Avy timer
#+BEGIN_SRC emacs-lisp
(map! "C-s" 'evil-avy-goto-char-timer
      "C-l" 'evil-avy-goto-line)
(setq avy-all-windows t)

#+END_SRC
** Xwidgets
#+BEGIN_SRC emacs-lisp
(after! xwidget
  (map!
   :map xwidget-webkit-mode-map
   :n "q" #'quit-window
   :n "r" #'xwidget-webkit-reload
   :n "y" #'xwidget-webkit-copy-selection-as-kill
   :n "s-c" #'xwidget-webkit-copy-selection-as-kill
   :n "t" #'xwidget-webkit-browse-url
   :n "n" #'xwidget-webkit-forward
   :n "p" #'xwidget-webkit-back
   :n "G" #'xwidget-webkit-scroll-bottom
   :n "gg" #'xwidget-webkit-scroll-top
   :n "C-d" #'xwidget-webkit-scroll-down
   :n "C-u" #'xwidget-webkit-scroll-up
   :n "M-=" #'xwidget-webkit-zoom-in
   :n "M--" #'xwidget-webkit-zoom-out
   :n "j" #'xwidget-webkit-scroll-up-line
   :n "k" #'xwidget-webkit-scroll-down-line)

  (setq browse-url-browser-function 'xwidget-webkit-browse-url)
  (advice-add 'xwidget-webkit-new-session :override #'*xwidget-webkit-new-session)
  (advice-add 'xwidget-webkit-goto-url :override #'*xwidget-webkit-goto-url)
  (setq xwidget-webkit-enable-plugins t)
  )
#+END_SRC
** Searching
#+BEGIN_SRC emacs-lisp

(setq +lookup-provider-url-alist
 '(("Google"            . "https://google.com/search?q=%s")
   ("StackOverflow"     . "https://stackoverflow.com/search?q=%s")
   ("Github"            . "https://github.com/search?ref=simplesearch&q=%s")
   ("Youtube"           . "https://youtube.com/results?aq=f&oq=&search_query=%s")
   ("Wikipedia"         . "https://wikipedia.org/search-redirect.php?language=en&go=Go&search=%s")))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(map! :leader
      :prefix "s"
      "s" #'swiper)
(def-package! deadgrep
  :config
  (evil-set-initial-state 'deadgrep-mode 'emacs)
  (map! :leader
        "sD" #'deadgrep))

#+END_SRC
#+BEGIN_SRC emacs-lisp

(map! :after outline
      :map (outline-mode-map outline-minor-mode-map)
      :nvime "C-h" #'dwim-jump
      :nvime "C-r" #'outline-cycle
      :nvime "C-j" (lambda! (outline-next-visible-heading 1) (recenter))
      :nvime "C-k" (lambda! (outline-previous-visible-heading 1) (recenter))
      :nvime "<C-return>" (lambda! (evil-open-below 0) (outline-insert-heading))
      :nvime "C-S-h" #'outline-promote
      :nvime "C-S-l" #'outline-demote
      :nvime "C-S-j" #'outline-move-subtree-down
      :nvime "C-S-k" #'outline-move-subtree-up
      :m "gj" #'outline-next-heading
      :m "gk" #'outline-previous-heading
      :nm "gJ" #'outline-move-subtree-down
      :nm "gK" #'outline-move-subtree-up
      :nm "gH" #'outline-promote
      :nm "gL" #'outline-demote
      :m "g SPC" #'outline-toggle-children)
#+END_SRC
Open links
#+BEGIN_SRC emacs-lisp
(map! :leader
      "x" nil)
(def-package! link-hint
  :defer t
  :init
  (map! :leader
        :prefix ("x")
        "o" 'link-hint-open-link
        "O" 'link-hint-open-multiple-links
        "y" 'link-hint-copy-link))
#+END_SRC

** Window Movement

#+BEGIN_SRC emacs-lisp
(map! :leader
      "ww" #'ace-window
      "wd" #'evil-quit
      "wD" #'ace-delete-window
      )


#+END_SRC

#+BEGIN_SRC emacs-lisp
(after! ace-window
:pre-config
 (set-face-attribute
  'aw-leading-char-face nil
  :foreground "deep sky blue"
  :weight 'bold
  :height 3.0)
 (set-face-attribute
  'aw-mode-line-face nil
  :inherit 'mode-line-buffer-id
  :foreground "lawn green")
 (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l)
       aw-dispatch-always t
       aw-dispatch-alist
       '((?x aw-delete-window "Ace - Delete Window")
         (?c aw-swap-window "Ace - Swap Window")
         (?n aw-flip-window)
         (?j aw-switch-buffer-in-window " Ace - Select Buffer")
         (?v aw-split-window-vert "Ace - Split Vert Window")
         (?h aw-split-window-horz "Ace - Split Horz Window")
         (?m delete-other-windows "Ace - Maximize Window")
         (?g delete-other-windows)
         (?b balance-windows)
         (?u (lambda ()
               (progn
                 (winner-undo)
                 (setq this-command 'winner-undo))))
         (?r winner-redo)))
 (ace-window-display-mode t))
#+END_SRC
** Project Management
#+BEGIN_SRC emacs-lisp
(after! projectile
  :post-config
  (add-to-list 'projectile-globally-ignored-directories "vendor")
  (add-to-list 'projectile-globally-ignored-directories ".gen")
  (add-to-list 'projectile-globally-ignored-directories "go-build")
  (setq projectile-sort-order 'recentf)
  )

#+END_SRC

#+BEGIN_SRC emacs-lisp
;; rebuild cache on project checkout
(defun run-projectile-invalidate-cache (&rest _args)
  ;; We ignore the args to `magit-checkout'.
  (projectile-invalidate-cache nil))
(advice-add 'magit-checkout
            :after #'run-projectile-invalidate-cache)
(advice-add 'magit-branch-and-checkout ; This is `b c'.
            :after #'run-projectile-invalidate-cache)
#+END_SRC

Remap workspaces to ~l~
#+BEGIN_SRC emacs-lisp


(map! :leader
      :after ivy
      (:when (featurep! :ui workspaces)
        (:prefix-map ("l" . "workspace")
          :desc "Display tab bar"           "d" #'+workspace/display
          :desc "Switch workspace"          "l"   #'+workspace/switch-to
          :desc "New workspace"             "c"   #'+workspace/new
          :desc "Load workspace from file"  "L"   #'+workspace/load
          :desc "Save workspace to file"    "s"   #'+workspace/save
          :desc "Delete session"            "x"   #'+workspace/kill-session
          :desc "Delete this workspace"     "d"   #'+workspace/delete
          :desc "Rename workspace"          "r"   #'+workspace/rename
          :desc "Restore last session"      "R"   #'+workspace/restore-last-session
          :desc "Next workspace"            "n"   #'+workspace/switch-right
          :desc "Previous workspace"        "p"   #'+workspace/switch-left
          :desc "Switch to 1st workspace"   "1"   (Î»! (+workspace/switch-to 0))
          :desc "Switch to 2nd workspace"   "2"   (Î»! (+workspace/switch-to 1))
          :desc "Switch to 3rd workspace"   "3"   (Î»! (+workspace/switch-to 2))
          :desc "Switch to 4th workspace"   "4"   (Î»! (+workspace/switch-to 3))
          :desc "Switch to 5th workspace"   "5"   (Î»! (+workspace/switch-to 4))
          :desc "Switch to 6th workspace"   "6"   (Î»! (+workspace/switch-to 5))
          :desc "Switch to 7th workspace"   "7"   (Î»! (+workspace/switch-to 6))
          :desc "Switch to 8th workspace"   "8"   (Î»! (+workspace/switch-to 7))
          (:prefix-map ("v" . "views")
           :desc "switch view" "v" #'ivy-switch-view
           :desc "push view" "a" #'ivy-push-view
           :desc "pop view" "x" #'ivy-pop-view)
          :desc "Switch to 9th workspace"   "9"   (Î»! (+workspace/switch-to 8))
          :desc "Switch to last workspace"  "0"   #'+workspace/switch-to-last)))

(map! :leader
      :desc "Search project"                "/" #'+default/search-project
      ;;; <leader> p --- project
      (:prefix-map ("p" . "project")
        :desc "Browse project"               "p" #'+default/browse-project
        :desc "Find file in project"  "f"  #'projectile-find-file
        :desc "Switch project"               "l" #'projectile-switch-project
        :desc "Pop up scratch buffer"        "S" #'doom/open-project-scratch-buffer)
      )
#+END_SRC
** Buffers
#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buffer")
        :desc "Pop up scratch buffer"       "d"   #'kill-current-buffer
        :desc "Pop up scratch buffer"       "s"   #'doom/open-scratch-buffer)
      "TAB" #'previous-buffer
      )

#+END_SRC
** Searching
#+BEGIN_SRC emacs-lisp
(map! :leader
      ;;; <leader> / --- search
      (:prefix-map ("s" . "search")
        :desc "Search buffer"                 "s" #'swiper
        :desc "Search current directory"      "d" #'+default/search-from-cwd
        :desc "Jump to symbol"                "i" #'imenu
        :desc "Jump to link"                  "l" #'ace-link
        :desc "Look up online"                "o" #'+lookup/online-select
        :desc "Look up in local docsets"      "k" #'+lookup/in-docsets
        :desc "Look up in all docsets"        "K" #'+lookup/in-all-docsets
        :desc "Search project"                "p" #'+default/search-project)

      ;;; <leader> s --- snippets
      (:when (featurep! :editor snippets)
        (:prefix-map ("S" . "snippets")
          :desc "New snippet"                "n" #'yas-new-snippet
          :desc "Insert snippet"             "i" #'yas-insert-snippet
          :desc "Jump to mode snippet"       "/" #'yas-visit-snippet-file
          :desc "Jump to snippet"            "s" #'+snippets/find-file
          :desc "Browse snippets"            "S" #'+snippets/browse
          :desc "Reload snippets"            "r" #'yas-reload-all
          :desc "Create temporary snippet"   "c" #'aya-create
          :desc "Use temporary snippet"      "e" #'aya-expand)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(map! :nvime "C-h" #'dwim-jump)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(set-docsets! 'go-mode "go")
#+END_SRC
** Tools
TLDR for documentation
#+BEGIN_SRC emacs-lisp
(def-package! tldr
:commands tldr
:defer t)
#+END_SRC

Exit async buffer on ~q~
#+BEGIN_SRC emacs-lisp
 (defun arnav/maybe-set-quit-key ()
   (when (string= (buffer-name) "*Async Shell Command*")
     (local-set-key (kbd "q") #'quit-window)))

 (add-hook 'shell-mode-hook #'arnav/maybe-set-quit-key)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(def-package! alert
:defer t
:config
  (setq alert-default-style 'osx-notifier)
)
#+END_SRC

Ivy/Swiper/Counsel
#+BEGIN_SRC emacs-lisp
(map!
 :map ivy-minibuffer-map "C-c o" #'ivy-occur)
#+END_SRC
** Latex
#+BEGIN_SRC emacs-lisp
(setq +latex-viewers '(pdf-tools))
#+END_SRC

#+begin_src  emacs-lisp
(after! ivy-bibtex
  :pre-config
  (setq bibtex-completion-bibliography "~/Papers/references.bib"
        bibtex-completion-library-path '("~/Papers/pdfs/")
        bibtex-completion-notes-path "~/Papers/notes/")
  )

#+end_src
*** PDF Tools config
#+BEGIN_SRC emacs-lisp
(after! (hydra pdf-tools)
 (defhydra hydra-pdftools (:color blue :hint nil)
   "
                                                                      â­ââââââââââââ
       Move  History   Scale/Fit     Annotations  Search/Link    Do   â PDF Tools â
   â­âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ´ââââââââââââ¯
         ^^_g_^^      _B_    ^â§^    _+_    ^ ^     [_al_] list    [_s_] search    [_u_] revert buffer
         ^^^â^^^      ^â^    _H_    ^â^  â¦ _W_ â¤   [_am_] markup  [_o_] outline   [_i_] info
         ^^_p_^^      ^ ^    ^â¥^    _0_    ^ ^     [_at_] text    [_F_] link      [_d_] dark mode
         ^^^â^^^      ^â^  â­â^â^ââ  ^â^  â­â^ ^ââ   [_ad_] delete  [_f_] search link
    _h_ âpag_e_â _l_  _N_  â _P_ â  _-_    _b_     [_aa_] dired
         ^^^â^^^      ^ ^  â°â^â^ââ¯  ^ ^  â°â^ ^ââ¯   [_y_]  yank
         ^^_n_^^      ^ ^  _r_eset slice box
         ^^^â^^^
         ^^_G_^^
   --------------------------------------------------------------------------------
        "
   ("." hydra-master/body "back")
   ("<ESC>" nil "quit")
   ("al" pdf-annot-list-annotations)
   ("ad" pdf-annot-delete)
   ("aa" pdf-annot-attachment-dired)
   ("am" pdf-annot-add-markup-annotation)
   ("at" pdf-annot-add-text-annotation)
   ("y"  pdf-view-kill-ring-save)
   ("+" pdf-view-enlarge :color red)
   ("-" pdf-view-shrink :color red)
   ("0" pdf-view-scale-reset)
   ("H" pdf-view-fit-height-to-window)
   ("W" pdf-view-fit-width-to-window)
   ("P" pdf-view-fit-page-to-window)
   ("n" pdf-view-next-page-command :color red)
   ("p" pdf-view-previous-page-command :color red)
   ("d" pdf-view-dark-minor-mode)
   ("b" pdf-view-set-slice-from-bounding-box)
   ("r" pdf-view-reset-slice)
   ("g" pdf-view-first-page)
   ("G" pdf-view-last-page)
   ("e" pdf-view-goto-page)
   ("o" pdf-outline)
   ("s" pdf-occur)
   ("i" pdf-misc-display-metadata)
   ("u" pdf-view-revert-buffer)
   ("F" pdf-links-action-perfom)
   ("f" pdf-links-isearch-link)
   ("B" pdf-history-backward :color red)
   ("N" pdf-history-forward :color red)
   ("l" image-forward-hscroll :color red)
   ("h" image-backward-hscroll :color red))

 )
#+END_SRC
#+BEGIN_SRC emacs-lisp
(after! pdf-tools
  (setq-default pdf-view-display-size 'fit-page)
  (map! :map pdf-view-mode-map
        :localleader
        "." #'hydra-pdftools/body
        "<s-spc>"   #'pdf-view-scroll-down-or-next-page
        "g"   #'pdf-view-first-page
        "G"   #'pdf-view-last-page
        "l"   #'image-forward-hscroll
        "h"   #'image-backward-hscroll
        "j"   #'pdf-view-next-page
        "k"   #'pdf-view-previous-page
        "e"   #'pdf-view-goto-page
        "u"   #'pdf-view-revert-buffer
        "al"  #'pdf-annot-list-annotations
        "ad"  #'pdf-annot-delete
        "aa"  #'pdf-annot-attachment-dired
        "am"  #'pdf-annot-add-markup-annotation
        "at"  #'pdf-annot-add-text-annotation
        "y"   #'pdf-view-kill-ring-save
        "i"   #'pdf-misc-display-metadata
        "s"   #'pdf-occur
        "b"   #'pdf-view-set-slice-from-bounding-box
        "r"   #'pdf-view-reset-slice))
#+END_SRC

** Eshell
#+BEGIN_SRC emacs-lisp
  (setq eshell-aliases-file "/Users/arnav/dotfiles/eshell-aliases")
#+END_SRC


Aweshell
#+BEGIN_SRC emacs-lisp
(def-package! aweshell
  :config
  (map! :leader
        (:prefix ("e" . "awesomesll")
          "c" #'aweshell-new
          "a" #'aweshell-switch-buffer
          "n" #'aweshell-next
          "p" #'aweshell-prev
          "S" #'aweshell-sudo-toggle
          )
        "'" #'+eshell/open-popup
        )
  )
#+END_SRC

** Private

#+begin_src emacs-lisp
(defun arnav/ussh ()
  (interactive)
  (async-shell-command "ussh"))

(defun arnav/insert-pass ()
  (interactive)
  (insert "IWork@Ub3rFin3ng"))

(map! :leader
      "C-u" #'arnav/ussh)

(map! :map minibuffer-local-map
      "M-u" #'arnav/insert-pass)
#+end_src
** Completions/LSP/Error
#+BEGIN_SRC emacs-lisp
(after! company
  ;; **** prescient
  (def-package! company-prescient
    :hook (company-mode . company-prescient-mode))
  (def-package! company-box
    :config
    (setq company-box-max-candidates 10)
    :hook (company-mode . company-box-mode)
    )
  ;; **** company-ui
  (setq company-tooltip-limit 10
        company-tooltip-minimum-width 80
        company-tooltip-minimum 10
        company-backends
        '(company-capf company-dabbrev company-files company-yasnippet)
        company-global-modes '(not comint-mode erc-mode message-mode help-mode gud-mode)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(after! lsp
  (setq lsp-ui-sideline-show-symbol nil)
  (setq lsp-ui-sideline-enable nil)
  (setq company-lsp-cache-candidates 'auto))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(def-package! flycheck-posframe
  :init
  (setq flycheck-posframe-warning-prefix "â  "
        flycheck-posframe-info-prefix "Â·Â·Â· "
        flycheck-posframe-error-prefix "ï ")
  ;; (advice-add 'flycheck-posframe-delete-posframe :override #'*flycheck-posframe-delete-posframe)
  (advice-add 'flycheck-posframe-show-posframe :override #'*flycheck-posframe-show-posframe)
  ;; (advice-add '+syntax-checker-cleanup-popup :override #'+syntax-checker*cleanup-popup)
  )
#+END_SRC
#+BEGIN_SRC emacs-lisp
(after! lsp
  (setq lsp-prefer-flymake nil))
(after! lsp-ui
  :config
  (setq
   lsp-ui-flycheck-enable t
   lsp-ui-sideline-enable nil
   lsp-ui-sideline-ignore-duplicate t
   lsp-enable-completion-at-point t
   lsp-ui-doc-position 'at-point
   lsp-ui-doc-header nil
   lsp-ui-doc-enable t
   lsp-ui-doc-include-signature t
   lsp-ui-doc-border (doom-color 'fg))
  (defun +my/hover-or-signature-help ()
    (if (evil-insert-state-p)
        (lsp-signature-help)
      (lsp-hover)))
  (setq lsp-eldoc-hook '(lsp-document-highlight +my/hover-or-signature-help))

  (map! :after lsp-ui-peek
        :map lsp-ui-peek-mode-map
        "h" #'lsp-ui-peek--select-prev-file
        "j" #'lsp-ui-peek--select-next
        "k" #'lsp-ui-peek--select-prev
        "l" #'lsp-ui-peek--select-next-file)

  (defhydra hydra/ref (evil-normal-state-map "x")
    "reference"
    ("p" (-let [(i . n) (lsp-ui-find-prev-reference)]
           (if (> n 0) (message "%d/%d" i n))) "prev")
    ("n" (-let [(i . n) (lsp-ui-find-next-reference)]
           (if (> n 0) (message "%d/%d" i n))) "next")
    ("R" (-let [(i . n) (lsp-ui-find-prev-reference '(:role 8))]
           (if (> n 0) (message "read %d/%d" i n))) "prev read" :bind nil)
    ("r" (-let [(i . n) (lsp-ui-find-next-reference '(:role 8))]
           (if (> n 0) (message "read %d/%d" i n))) "next read" :bind nil)
    ("W" (-let [(i . n) (lsp-ui-find-prev-reference '(:role 16))]
           (if (> n 0) (message "write %d/%d" i n))) "prev write" :bind nil)
    ("w" (-let [(i . n) (lsp-ui-find-next-reference '(:role 16))]
           (if (> n 0) (message "write %d/%d" i n))) "next write" :bind nil)))
#+END_SRC
** Email
[[http://prodissues.com/2016/02/adding-mu4e-support-to-emacs.html][prodissues]] source for this
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/usr/local/Cellar/mu/mu4e")
(setq mu4e-mu-binary (executable-find "/usr/local/Cellar/mu/mu/mu"))
(require 'mu4e)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Open mu4e" "M" #'mu4e)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(after! mu4e
  (setq +mu4e-backend 'offlineimap)
  (setq mu4e-maildir (expand-file-name "~/.Mail/arnav@uber.com"))
  (setq mu4e-attachment-dir (expand-file-name "~/Downloads"))
  (setq mu4e-update-interval (* 5 60))

  (setq mail-user-agent 'mu4e-user-agent)
  (setq mu4e-change-filenames-when-moving nil)
  (setq mu4e-refile-folder "/Archive")
  (setq mu4e-drafts-folder "/[Gmail].Drafts")
  (setq mu4e-sent-folder   "/[Gmail].Sent Mail")
  (setq mu4e-trash-folder  "/[Gmail].Trash")
  (setq mu4e-sent-messages-behavior 'delete)

  (setq mu4e-maildir-shortcuts
        '( ("/INBOX" . ?i)
           ("/[Gmail].Sent Mail"   . ?s)
           ("/1.Phabricator.Diffs"       . ?d)
           ("/[Gmail].Trash"       . ?t)
           ("/1.Phabricator.Tasks"    . ?T)))

  (setq mu4e-get-mail-command "offlineimap")

  (setq
   user-mail-address "arnav@uber.com"
   user-full-name  "Arnav Sharma"
   mu4e-compose-signature "Arnav Sharma\n")
  )
#+end_src

Alert
#+BEGIN_SRC emacs-lisp
(def-package! mu4e-alert
  :after mu4e
  :init
  (setq mu4e-alert-interesting-mail-query
        (concat
         "flag:unread "
         "AND NOT from:umonitor* "
         "AND NOT from:code.uberinternal* "))
        (mu4e-alert-set-default-style 'notifier)
        :config
        (mu4e-alert-enable-mode-line-display)
        (mu4e-alert-enable-notifications))
#+END_SRC

SMTP settings
#+begin_src emacs-lisp
(after! smtpmail
  (setq message-send-mail-function 'smtpmail-send-it
        starttls-use-gnutls t
        smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
        smtpmail-auth-credentials
        '(("smtp.gmail.com" 587 "arnav@uber.com" nil))
        smtpmail-default-smtp-server "smtp.gmail.com"
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587)
  (setq message-kill-buffer-on-exit t))
#+end_src

[[https://github.com/abo-abo/hydra/wiki/mu4e][abo-abo mu4e hydra]]
#+begin_src emacs-lisp
(after! (hydra mu4e)
  (defhydra hydra-mu4e-headers (:color blue :hint nil)
    "
     ^General^   | ^Search^           | _!_: read    | _#_: deferred  | ^Switches^
    -^^----------+-^^-----------------| _?_: unread  | _%_: pattern   |-^^------------------
    _n_: next    | _s_: search        | _r_: refile  | _&_: custom    | _O_: sorting
    _p_: prev    | _S_: edit prev qry | _u_: unmk    | _+_: flag      | _P_: threading
    _]_: n unred | _/_: narrow search | _U_: unmk *  | _-_: unflag    | _Q_: full-search
    _[_: p unred | _b_: search bkmk   | _d_: trash   | _T_: thr       | _V_: skip dups
    _y_: sw view | _B_: edit bkmk     | _D_: delete  | _t_: subthr    | _W_: include-related
    _R_: reply   | _{_: previous qry  | _m_: move    |-^^-------------+-^^------------------
    _C_: compose | _}_: next query    | _a_: action  | _|_: thru shl  | _`_: update, reindex
    _F_: forward | _C-+_: show more   | _A_: mk4actn | _H_: help      | _;_: context-switch
    _o_: org-cap | _C--_: show less   | _*_: *thing  | _q_: quit hdrs | _j_: jump2maildir "

    ;; general
    ("n" mu4e-headers-next)
    ("p" mu4e-headers-previous)
    ("[" mu4e-select-next-unread)
    ("]" mu4e-select-previous-unread)
    ("y" mu4e-select-other-view)
    ("R" mu4e-compose-reply)
    ("C" mu4e-compose-new)
    ("F" mu4e-compose-forward)

    ;; search
    ("s" mu4e-headers-search)
    ("S" mu4e-headers-search-edit)
    ("/" mu4e-headers-search-narrow)
    ("b" mu4e-headers-search-bookmark)
    ("B" mu4e-headers-search-bookmark-edit)
    ("{" mu4e-headers-query-prev)              ; differs from built-in
    ("}" mu4e-headers-query-next)              ; differs from built-in
    ("C-+" mu4e-headers-split-view-grow)
    ("C--" mu4e-headers-split-view-shrink)
    ("O" arnav/org-capture-mu4e)

    ;; mark stuff
    ("!" mu4e-headers-mark-for-read)
    ("?" mu4e-headers-mark-for-unread)
    ("r" mu4e-headers-mark-for-refile)
    ("u" mu4e-headers-mark-for-unmark)
    ("U" mu4e-mark-unmark-all)
    ("d" mu4e-headers-mark-for-trash)
    ("D" mu4e-headers-mark-for-delete)
    ("m" mu4e-headers-mark-for-move)
    ("a" mu4e-headers-action)                  ; not really a mark per-se
    ("A" mu4e-headers-mark-for-action)         ; differs from built-in
    ("*" mu4e-headers-mark-for-something)

    ("#" mu4e-mark-resolve-deferred-marks)
    ("%" mu4e-headers-mark-pattern)
    ("&" mu4e-headers-mark-custom)
    ("+" mu4e-headers-mark-for-flag)
    ("-" mu4e-headers-mark-for-unflag)
    ("t" mu4e-headers-mark-subthread)
    ("T" mu4e-headers-mark-thread)

    ;; miscellany
    ("q" mu4e~headers-quit-buffer)
    ("H" mu4e-display-manual)
    ("|" mu4e-view-pipe)                       ; does not seem built-in any longer

    ;; switches
    ("o" mu4e-headers-change-sorting)
    ("P" mu4e-headers-toggle-threading)
    ("Q" mu4e-headers-toggle-full-search)
    ("V" mu4e-headers-toggle-skip-duplicates)
    ("W" mu4e-headers-toggle-include-related)

    ;; more miscellany
    ("`" mu4e-update-mail-and-index)           ; differs from built-in
    (";" mu4e-context-switch)
    ("j" mu4e~headers-jump-to-maildir)

    ("." nil)))
#+end_src
#+BEGIN_SRC emacs-lisp
;; neeed to define a mode to get this to work
(after! mu4e
  (add-to-list 'mu4e-bookmarks
               (make-mu4e-bookmark
                :name  "Arnav messages"
                :query "date:1d..now and arnav and not to:arnav"
                :key ?a))
  (map! :map mu4e-headers-mode-map
        "{"  #'mu4e-headers-query-prev
        "}"  #'mu4e-headers-query-next
        "O"  #'arnav/org-capture-mu4e

        "A"  #'mu4e-headers-mark-for-action

        "`"  #'mu4e-update-mail-and-index
        "|"  #'mu4e-view-pipe)
  (map! (:map (mu4e-headers-mode-map mu4e-view-mode-map mu4e-compose-mode-map)
          :n "."  #'hydra-mu4e-headers/body
          :n "O" #'arnav/org-capture-mu4e)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(def-package! org-mu4e
  :after org mu4e
  :config
  (setq org-mu4e-link-query-in-headers-mode nil))
#+END_SRC

** Go mode
Golangci linting
#+BEGIN_SRC emacs-lisp
(use-package flycheck-golangci-lint
  :hook (go-mode . flycheck-golangci-lint-setup))
#+END_SRC
Test stubbing
#+BEGIN_SRC emacs-lisp

(def-package! go-gen-test
  :defer t
  :init
  (map! :mode go-mode
        :localleader
        (:prefix "t"
          (:prefix-map ("g" . "tests generate")
            :desc "Generate missing tests" "g" #'go-gen-test-dwim
            :desc "Generate exported tests" "e" #'go-gen-test-exported
            :desc "Generate missing tests" "a" #'go-gen-test-all))
        )

  )
#+END_SRC

Refactor
#+BEGIN_SRC emacs-lisp

(def-package! go-tag :defer t)
(def-package! godoctor :defer t)
(map! :mode go-mode
      :localleader
      (:prefix-map ("r" . "refactor")
        :desc "add tag" "t"  #'go-tag-add
        :desc "remove tag" "T" #'go-tag-remove
        :desc "add godoc" "d" #'godoctor-godoc
        :desc "extract godoc"  "e" #'godoctor-extract
        :desc "rename"  "r" #'godoctor-rename
        :desc "toggle" "t" #'godoctor-toggle))

#+END_SRC
Keymaps
#+BEGIN_SRC emacs-lisp
(map! :mode go-mode
      :localleader
      (:prefix ("g" . "go to")
      "a" #'ff-find-other-file))

#+END_SRC
Jumping here and there
#+BEGIN_SRC emacs-lisp
(map! :leader
 :mode go-mode
 :after lsp
 :prefix "c"
   :desc "page menu" "M" #'lsp-ui-imenu
   :desc "show doc" "c" #'lsp-describe-thing-at-point
   :desc "restart lsp" "M-r" #'lsp-restart-workspace
   :desc "lsp rename" "R" #'lsp-rename
   :desc "find implementations" "i" #'lsp-find-implementation
   :desc "peek definition" "d" #'lsp-ui-peek-find-definitions
   :desc "peek references" "r" #'lsp-ui-peek-find-references)
#+END_SRC
** Org mode
*** Generic
#+BEGIN_SRC emacs-lisp
(map! :localleader
      :after org
      :map org-mode-map
      "RET" #'org-ctrl-c-ret
      "," #'org-ctrl-c-ctrl-c)
(map! :localleader
      :after org
      :map org-src-mode-map
      :n "," #'org-edit-src-exit
      :n "k" #'org-edit-src-abort
      :n "s" #'org-edit-src-save)
(map! :localleader
      :after org
      :map org-mode-map
      "L" #'org-cliplink)
#+END_SRC

Auto save org mode buffers if org agenda is open
#+BEGIN_SRC emacs-lisp
(add-hook 'org-agenda-mode-hook
          (lambda ()
            (add-hook 'auto-save-hook 'org-save-all-org-buffers nil t)
            (auto-save-mode)))
#+END_SRC

Enable autoalist mode
#+BEGIN_SRC emacs-lisp
(def-package! org-autolist
  :hook (org-mode . org-autolist-mode))
#+END_SRC

*** Secretary
#+BEGIN_SRC emacs-lisp
(def-package! org-secretary
  :config

  (defun my/org-sec-with-view (par &optional who)
    "Select tasks marked as dowith=who, where who
     defaults to the value of org-sec-with."
    (org-tags-view '(4) (join (split-string (if who
                                                who
                                              (org-sec-get-with)))
                              "|" "with=\"" "\"")))
  (defun my/org-sec-who-view (par)
    "Builds agenda for a given user.  Queried. "
    ;; (let ((who (read-string "Build todo for user/tag: "
    ;;                         "" "" "")))
    (let ((who "arnav"))
      (ivy-read "Folks:" org-sec-with-history
                :action (lambda (candidate) (setq who candidate)))
      (my/org-sec-with-view "TODO with" who)
      (org-sec-assigned-with-view "TASK with" who)
      (org-sec-stuck-with-view "STUCK with" who)))

  )

#+END_SRC
*** GTD - or trying to

**** States
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-todo-keywords
        '((sequence "TODO(t)" "INPROGRESS(p/!)" "WAIT(w@/!)" "|"  "DONE(d/!)" "CANCELLED(c@/!)")
          (sequence "TASK(f)" "|" "CANCELLED(c)" "DONE(D)")))
  (setq org-log-states-order-reversed t)

  
)

#+END_SRC

**** Agenda
#+BEGIN_SRC emacs-lisp
(setq arnav/inbox-file "~/Dropbox/org/gtd/inbox.org")
(setq arnav/gtd-file "~/Dropbox/org/gtd/gtd.org")
(setq arnav/notes-file "~/Dropbox/org/notes.org")
(setq arnav/someday-file "~/Dropbox/org/gtd/someday.org")
(setq arnav/tickler-file "~/Dropbox/org/gtd/tickler.org")
(setq arnav/uber-calendar-file "~/Dropbox/org/calendar/arnav@uber.org")
(map! :leader
      "a" nil
      (:prefix ("a" . "Agenda GTD")
        (:prefix ("g". "goto")
          :desc "open inbox file" "i" (Î»! (find-file arnav/inbox-file) )
          :desc "open gtd file" "g" (Î»! (find-file arnav/gtd-file) )
          :desc "open notes file" "n" (Î»! (find-file arnav/notes-file) )
          :desc "open someday file" "s" (Î»! (find-file arnav/someday-file) )
          :desc "open tickler file" "T" (Î»! (find-file arnav/tickler-file) ))
        (:prefix ("C" . "Clock")
          :desc "active" "c" #'org-clock-goto
          :desc "stop" "s" #'org-clock-out)
        "a" #'org-agenda-list
        "c" #'org-capture
        "l" #'org-agenda))

 (setq org-global-properties
       '(("Effort_ALL" .
          "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 8:00")))

(setq org-refile-targets '((arnav/gtd-file :maxlevel . 2)
                           (arnav/someday-file :level . 1)
                           (arnav/tickler-file :maxlevel . 2)))
(setq org-refile-use-outline-path t
      org-outline-path-complete-in-steps nil)
(setq org-refile-allow-creating-parent-nodes 'confirm)

(setq org-agenda-files (list arnav/inbox-file
                         arnav/gtd-file
                         arnav/uber-calendar-file
                         arnav/tickler-file))
#+END_SRC

**** Org capture templates
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                 (file+headline "~/Dropbox/org/gtd/inbox.org" "Tasks")
                                 (file "~/Dropbox/org/templates/todo.orgcaptmpl")
                                 :empty-lines 1)
                                ("n" "Note" entry
                                 (file "~/Dropbox/org/notes.org")
                                 (file "~/Dropbox/org/templates/note.orgcaptmpl")
                                 :empty-lines 1)
                                ("f" "Task [inbox]" entry
                                 (file+headline "~/Dropbox/org/gtd/inbox.org" "Tasks")
                                 (file "~/Dropbox/org/templates/task.orgcaptmpl")
                                 :empty-lines 1)
                                ("T" "Tickler" entry
                                 (file+headline "~/Dropbox/org/gtd/tickler.org" "Tickler")
                                 "* %i%? \n %U" :empty-lines 1)
                                ("i" "Interview"
                                 entry
                                 (file "~/Dropbox/org/interviews.org")
                                 (file "~/Dropbox/org/templates/interview.orgcaptmpl")
                                 :empty-lines 1)))
  (map! :map org-capture-mode-map
        :localleader
        "," #'org-capture-finalize
        "k" #'org-capture-kill))

(def-package! org-protocol-capture-html)

#+END_SRC
#+BEGIN_SRC emacs-lisp
(map! :map org-mode-map
      :after org
      :n "M-l" #'org-shiftmetaright)

#+END_SRC
#+BEGIN_SRC emacs-lisp

(defun arnav/org-capture-mu4e ()
  (interactive)
  "Capture a TODO item via email."
  (let ((org-capture-templates '(("o" "Email [inbox]" entry
                                 (file+headline "~/Dropbox/org/gtd/inbox.org" "Tasks")
                                 (file "~/Dropbox/org/templates/todo.orgcaptmpl")
                                 :empty-lines 1)
                                )))

    (org-capture nil "o"))
  )
#+END_SRC
#+BEGIN_SRC emacs-lisp
(after! org
  ;; Hydra for org agenda (graciously taken from Spacemacs)
  (defhydra hydra-org-agenda (:pre (setq which-key-inhibit t)
                                   :post (setq which-key-inhibit nil)
                                   :hint none)
    "
Org agenda (_q_uit)

^Clock^      ^Visit entry^              ^Date^             ^Other^
^-----^----  ^-----------^------------  ^----^-----------  ^-----^---------
_ci_ in      _SPC_ in other window      _ds_ schedule      _gr_ reload
_co_ out     _TAB_ & go to location     _dd_ set deadline  _._  go to today
_cq_ cancel  _RET_ & del other windows  _dt_ timestamp     _gd_ go to date
_cj_ jump    _o_   link                 _+_  do later      ^^
^^           ^^                         _-_  do earlier    ^^
^^           ^^                         ^^                 ^^
^View^          ^Filter^                 ^Headline^         ^Toggle mode^
^----^--------  ^------^---------------  ^--------^-------  ^-----------^----
_vd_ day        _ft_ by tag              _ht_ set status    _tf_ follow
_vw_ week       _fr_ refine by tag       _hk_ kill          _tl_ log
_vt_ fortnight  _fc_ by category         _hr_ refile        _ta_ archive trees
_vm_ month      _fh_ by top headline     _hA_ archive       _tA_ archive files
_vy_ year       _fx_ by regexp           _h:_ set tags      _tr_ clock report
_vn_ next span  _fd_ delete all filters  _hp_ set priority  _td_ diaries
_vp_ prev span  ^^                       ^^                 ^^
_vr_ reset      ^^                       ^^                 ^^
^^              ^^                       ^^                 ^^
"
    ;; Entry
    ("hA" org-agenda-archive-default)
    ("hk" org-agenda-kill)
    ("hp" org-agenda-priority)
    ("hr" org-agenda-refile)
    ("h:" org-agenda-set-tags)
    ("ht" org-agenda-todo)
    ;; Visit entry
    ("o"   link-hint-open-link :exit t)
    ("<tab>" org-agenda-goto :exit t)
    ("TAB" org-agenda-goto :exit t)
    ("SPC" org-agenda-show-and-scroll-up)
    ("RET" org-agenda-switch-to :exit t)
    ;; Date
    ("dt" org-agenda-date-prompt)
    ("dd" org-agenda-deadline)
    ("+" org-agenda-do-date-later)
    ("-" org-agenda-do-date-earlier)
    ("ds" org-agenda-schedule)
    ;; View
    ("vd" org-agenda-day-view)
    ("vw" org-agenda-week-view)
    ("vt" org-agenda-fortnight-view)
    ("vm" org-agenda-month-view)
    ("vy" org-agenda-year-view)
    ("vn" org-agenda-later)
    ("vp" org-agenda-earlier)
    ("vr" org-agenda-reset-view)
    ;; Toggle mode
    ("ta" org-agenda-archives-mode)
    ("tA" (org-agenda-archives-mode 'files))
    ("tr" org-agenda-clockreport-mode)
    ("tf" org-agenda-follow-mode)
    ("tl" org-agenda-log-mode)
    ("td" org-agenda-toggle-diary)
    ;; Filter
    ("fc" org-agenda-filter-by-category)
    ("fx" org-agenda-filter-by-regexp)
    ("ft" org-agenda-filter-by-tag)
    ("fr" org-agenda-filter-by-tag-refine)
    ("fh" org-agenda-filter-by-top-headline)
    ("fd" org-agenda-filter-remove-all)
    ;; Clock
    ("cq" org-agenda-clock-cancel)
    ("cj" org-agenda-clock-goto :exit t)
    ("ci" org-agenda-clock-in :exit t)
    ("co" org-agenda-clock-out)
    ;; Other
    ("q" nil :exit t)
    ("gd" org-agenda-goto-date)
    ("." org-agenda-goto-today)
    ("gr" org-agenda-redo))

  (map! :map org-agenda-mode-map
        :localleader
        "." #'hydra-org-agenda/body))
#+END_SRC

**** Super agenda
#+begin_src emacs-lisp
(def-package! org-super-agenda
  :after org-agenda evil
  :init
  (setq org-agenda-span 'day)
  (setq org-agenda-start-day nil)

  (setq org-super-agenda-groups
        '(;; Each group has an implicit boolean OR operator between its selectors.
          (:name "Important"
                 :priority>= "B"
                 ;; Show this section after "Today" and "Important", because
                 ;; their order is unspecified, defaulting to 0. Sections
                 ;; are displayed lowest-number-first.
                 :order 0)
          (:auto-property "with")
          (:discard
           (:regexp ("gym" "deployment" "yoga" "office hours")))
          (:name "Today"  ; Optionally specify section name
                 :todo ("INPROGRESS" "TODO")
                 :time-grid t
                 :order 1)  ; Items that have this TODO keyword
          ;; Set order of multiple groups at once
          (:order-multi (2 (:name "Waiting"
                                  :todo "WAIT"
                                  )
                           (:name "Done"
                                  :todo ("DONE"))))
          ;; (:name "Lead tasks"
          ;;        ;; Single arguments given alone
          ;;        :todo "TASK"
          ;;        :order 5

          )
        ;; (:name "Calendar"
        ;;        :order 5
        ;;        )
        ;; After the last group, the agenda will display items that didn't
        ;; match any of these groups, with the default order position of 99
        )
  :config
  (org-super-agenda-mode)
  (setq org-super-agenda-header-map (make-sparse-keymap))
  )
#+end_src

**** Custom commands
#+BEGIN_SRC emacs-lisp

(after! org-agenda
  (setq org-agenda-custom-commands
        '(("h" "Work todos" tags-todo
           "-personal-doat={.+}-dowith={.+}/!-TASK"
           ((org-agenda-todo-ignore-scheduled t)))
          ("u" "Unscheduled TODO"
           ((todo ""
                  ((org-agenda-overriding-header "\nUnscheduled TODO")
                   (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))))) nil)
          ("H" "All work todos" tags-todo "-personal/!-TASK"
           ((org-agenda-todo-ignore-scheduled nil)))
          ("A" "Work todos with doat or dowith" tags-todo
           "-personal+doat={.+}|dowith={.+}/!-TASK"
           ((org-agenda-todo-ignore-scheduled nil)))
          ("j" "Interactive TODO dowith and TASK with"
           ((my/org-sec-who-view "TODO dowith")))
          )))
#+END_SRC

*** Journaling or trying to

#+BEGIN_SRC emacs-lisp

(def-package! org-journal
  ;; TODO buffer not opening in journal mode
  :init
  (setq
   org-journal-dir "~/Dropbox/org/journal/"
        org-journal-file-format "%Y-%m-%d.org"
        org-journal-date-prefix "#+TITLE: "
        org-journal-date-format "%A, %B %d %Y"
        org-journal-time-prefix "* "
        org-journal-time-format "")

  :config
  (map! :leader
        (:prefix ("o" . "Orggg")
          (:prefix ("j". "Journal")
            :desc "new journal entry" "j" #'org-journal-new-entry
            :desc "new journal entry" "s" #'org-journal-search-forever
            )))
  (map! :map org-journal-mode-map
        :localleader
        "j" #'org-journal-new-entry
        "n" #'org-journal-next-entry
        "p" #'org-journal-previous-entry))
#+END_SRC

*** Calendar
#+BEGIN_SRC emacs-lisp
(after! org-gcal

  (setq org-gcal-client-id "609584643994-unjps7piimpal1v8fq14n61ru410vc7f.apps.googleusercontent.com"
        org-gcal-client-secret "djhZ6XBKwe67H8syu9Q24gEU"
        org-gcal-file-alist '(("arnav@uber.com" .  "/Users/arnav/Dropbox/org/calendar/arnav@uber.org")))
  (setq org-gcal-auto-archive t)
  (setq org-gcal-down-days 30)
  (setq org-gcal-up-days 30)
  (run-with-timer 0 (* 10 60) 'org-gcal-fetch))
#+END_SRC
*** Clocking

#+BEGIN_SRC emacs-lisp
(after! org
  ;; Resume clocking task when emacs is restarted
  (org-clock-persistence-insinuate)
  ;; Save the running clock and all clock history when exiting Emacs, load it on startup
  (setq org-clock-persist t)
  ;; Resume clocking task on clock-in if the clock is open
  (setq org-clock-in-resume t)
  ;; Do not prompt to resume an active clock, just resume it
  (setq org-clock-persist-query-resume nil)

  ;; Change tasks to whatever when clocking out
  (setq org-clock-out-switch-to-state nil)
  ;; Change tasks to whatever when clocking in
  (setq org-clock-in-switch-to-state "INPROGRESS")
  ;; Save clock data and state changes and notes in the LOGBOOK drawer
  (setq org-clock-into-drawer t)
  ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks
  ;; with 0:00 duration
  (setq org-clock-out-remove-zero-time-clocks t)
  ;; Clock out when moving task to a done state
  (setq org-clock-out-when-done t)
  ;; Enable auto clock resolution for finding open clocks
  ;; commenting out as I don't know what this does
  ;; (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
  ;; Include current clocking task in clock reports
  (setq org-clock-report-include-clocking-task t)
  ;; use pretty things for the clocktable
  (setq org-pretty-entities t)
  )


#+END_SRC
#+BEGIN_SRC emacs-lisp
(after! org
  (defun wicked/org-clock-in-if-starting ()
    "Clock in when the task is marked STARTED."
    (when (and (string= org-state "INPROGRESS")
               (not (string= org-last-state org-state)))
      (org-clock-in)))
  (add-hook 'org-after-todo-state-change-hook
            'wicked/org-clock-in-if-starting)
  (defadvice org-clock-in (after wicked activate)
    "Set this task's status to 'INPROGRESS'."
    (org-todo "INPROGRESS"))
  (defun wicked/org-clock-out-if-waiting ()
    "Clock out when the task is marked WAIT."
    (when (and (string= org-state "WAIT")
               (equal (marker-buffer org-clock-marker) (current-buffer))
               (< (point) org-clock-marker)
               (> (save-excursion (outline-next-heading) (point))
                  org-clock-marker)
               (not (string= org-last-state org-state)))
      (org-clock-out)))
  (add-hook 'org-after-todo-state-change-hook
            'wicked/org-clock-out-if-waiting)
)
#+END_SRC
*** Babel
#+BEGIN_SRC emacs-lisp
(after! org
  (add-to-list 'org-latex-packages-alist '("" "minted"))
(add-to-list 'org-latex-listings-langs '(java "java"))

   (setq org-latex-pdf-process
         '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
           "bibtex %b"
           "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
           "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (shell . t)
     (go . t)
     (plantuml . t)
     (latex . t)))
  (setq org-plantuml-jar-path
        (expand-file-name "/usr/local/Cellar/plantuml/1.2019.5/libexec/plantuml.jar"))

  )

#+END_SRC

* Finish loading
#+BEGIN_SRC emacs-lisp
  (alert "Successfully loaded: booyeah" :title "Doomed")
#+END_SRC
